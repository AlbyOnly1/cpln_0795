library(tidyverse)
library(sf)
library(tigris)
library(tidycensus)
census_api_key("e79f3706b6d61249968c6ce88794f6f556e5bf3d", overwrite = TRUE)
## Set up a list of variables to grab
acs_vars <- c("B01001_001E", # ACS total Pop estimate
"C02003_004E", # One race black
"C02003_003E", # One race white
"B03001_003E", # Hispanic (all)
"B02001_005E", # AAPI
"B11012_001E", # n Households
"B08137_003E", # Renter hh
"B08137_002E", # owner hh
"B06011_001E") # Median income in past 12 months
acs2020 <- get_acs(geography = "tract",
year = 2020,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
select(GEOID, NAME, acs_vars) %>%
rename(pop = B01001_001E,
med_inc = B06011_001E,
blk_tot = C02003_004E,
wht_tot = C02003_003E,
hsp_tot = B03001_003E,
aapi_tot = B02001_005E,
hhs = B11012_001E,
renter_hh = B08137_003E,
owner_hh = B08137_002E) %>%
mutate(year = 2020,
pct_wht = 100*(wht_tot/pop),
pct_blk = 100*(blk_tot/pop),
pct_hsp = 100*(hsp_tot/pop),
pct_aapi = 100*(aapi_tot/pop),
rent_pct = 100*(renter_hh / hhs)) %>%
mutate(tract = str_sub(GEOID, start= -6))
# Write class 1 shp
st_write(acs2020, "C:/Users/Michael/Documents/GitHub/cpln_0795/data/philadelphia_tracts_2020.shp")
source("~/GitHub/musa_7950/R/wrangle_vector_classes.R", echo=TRUE)
# Write class 2 dbf
write.csv(acs2020 %>%
as.data.frame %>%
select(-geometry) %>%
mutate(GEOID = as.numeric(GEOID)),
"C:/Users/Michael/Documents/GitHub/cpln_0795/data/philadelphia_tracts_2020.csv")
st_write(acs2020 %>%
select(tract, GEOID, NAME),
"C:/Users/Michael/Documents/GitHub/cpln_0795/data/philadelphia_tracts_no_data.shp")
philly_311 <- read.csv("https://phl.carto.com/api/v2/sql?filename=public_cases_fc&format=csv&skipfields=cartodb_id,the_geom,the_geom_webmercator&q=SELECT%20*%20FROM%20public_cases_fc%20WHERE%20requested_datetime%20%3E=%20%272023-01-01%27%20AND%20requested_datetime%20%3C%20%272023-03-01%27")
# Filter out NA lat/lon and filter for specific type
philly_311_clean <- philly_311 %>%
filter(is.na(lat) == FALSE) %>%
filter(subject == "Illegal Dumping") %>%
mutate(incident = 1) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
st_transform(crs = 2272)
st_write(philly_311_clean, "C:/Users/Michael/Documents/GitHub/cpln_0795/data/philly_311.shp")
councilDistricts <- st_read("https://opendata.arcgis.com/datasets/9298c2f3fa3241fbb176ff1e84d33360_0.geojson") %>%
st_transform(crs = 2272)
st_write(councilDistricts, "C:/Users/Michael/Documents/GitHub/cpln_0795/data/council_dist.shp")
library(tidyverse)
library(sf)
library(tigris)
phila_tracts <- read.csv("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_2020.csv")
glimpse(phila_tracts)
st_read("~/GitHub/cpln_0795/data/philadelphia_tracts_2020.shp") %>%
st_write("~/GitHub/cpln_0795/data/philadelphia_tracts_2020.geojson")
st_read("~/GitHub/cpln_0795/data/philadelphia_tracts_no_data.shp") %>%
st_write("~/GitHub/cpln_0795/data/philadelphia_tracts_no_data.geojson")
st_read("~/GitHub/cpln_0795/data/philly_311.shp") %>%
st_write("~/GitHub/cpln_0795/data/philly_311.geojson")
st_read("~/GitHub/cpln_0795/data/council_dist.shp") %>%
st_write("~/GitHub/cpln_0795/data/council_dist.geojson")
phila_tracts_sf <- read.csv("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_2020.geojson")
library(tidyverse)
library(sf)
library(tigris)
phila_tracts <- read.csv("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_2020.csv")
View(phila_tracts)
phila_tracts_sf <- st_read("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_2020.geojson")
phila_tracts_sf <- st_read("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_no_data.geojson")
phila_tracts_sf
st_crs(phila_tracts_sf)
phila_tracts_sf %>%
st_transform(crs = 2272)
tracts_with_data <- left_join(phila_tracts_sf, phila_tracts)
tracts_with_data <- left_join(phila_tracts_sf, phila_tracts, by = "NAME")
View(tracts_with_data)
glimpse(tracts_with_data)
tracts_with_data
plot(tracts_with_data)
vector_object <- c("schwarber", "turner", "harper", "bohm", "realmuto", "castellanos", "stott", "sosa", "rojas")
mean(phila_tracts$blk_tot)
median(phila_tracts$pct_wht)
median(phila_tracts$pct_wht, na.rm = TRUE)
mean(phila_tracts$pct_blk)
just_two_columns <- phila_tracts %>%
select(GEOID, tract)
some_new_column_names <- phila_tracts %>%
rename(tracty_mctracterson = tract,
unique_ID = GEOID)
ggplot()+
geom_sf(data = tracts_with_data,
aes(fill = med_inc), color = "transparent")
ggplot()+
geom_sf(data = tracts_with_data,
aes(fill = med_inc))
ggplot()+
geom_sf(data = tracts_with_data,
aes(fill = med_inc), color = "transparent")+
theme_minimal
ggplot()+
geom_sf(data = tracts_with_data,
aes(fill = med_inc), color = "transparent")+
theme_minimal()
ggplot()+
geom_sf)data = tracts_with_data %>%
ggplot()+
geom_sf(data = tracts_with_data %>%
mutate(owner_pct = 100*(owner_hh / hhs)),
aes(fill = owner_pct))
ggplot()+
geom_sf(data = tracts_with_data %>%
mutate(owner_pct = 100*(owner_hh / hhs)),
aes(fill = owner_pct)) +
theme_minimal()
ggplot()+
geom_sf(data = tracts_with_data %>%
mutate(owner_pct = 100*(owner_hh / hhs)) %>%
filter(owner_pct <= 100),
aes(fill = owner_pct)) +
theme_minimal()
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc))
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc)) +
theme_bw()
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc)) +
labs(
title = "Median Household Income, Philadelphia Census Tracts, 2020",
subtitle = "",
x="Dollars (not inflation adjusted)",
y="Number of Tracts",
caption = "Data: American Community Survey 5-year estimates")+
theme_bw()
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc)) +
labs(
title = "Median Household Income, Philadelphia Census Tracts, 2020",
subtitle = "A Few Tracts Have Median Incomes Well Above City Median",
x="Dollars (not inflation adjusted)",
y="Number of Tracts",
caption = "Data: American Community Survey 5-year estimates")+
theme_bw()
mean(phila_tracts$hh_inc)
mean(phila_tracts$med_inc)
mean(phila_tracts$pop)
median(phila_tracts$med_inc, na.rm = TRUE)
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc)) +
labs(
title = "Median Household Income, Philadelphia Census Tracts, 2020",
subtitle = "The Average Tract's Median HH Income is appx $26,700",
x="Dollars (not inflation adjusted)",
y="Number of Tracts",
caption = "Data: American Community Survey 5-year estimates")+
theme_bw()
glimpse(phila_tracts)
some_new_mutated_columns <- phila_tracts %>%
mutate(pct_own = 100*(owner_hh/hhs),
majority_white = ifelse(pct_wt > 50, TRUE, FALSE))
some_new_mutated_columns <- phila_tracts %>%
mutate(pct_own = 100*(owner_hh/hhs),
majority_white = ifelse(pct_wht > 50, TRUE, FALSE))
View(some_new_mutated_columns)
# Introduction to GIS with R - The Tidyverse and sf
# CPLN 0795, 2024
# We are going to do almost the exact same routines that we did in classes 2-3 using ArcGIS,
# except we will do it in R.
# First we toy around with code really simply to see how it executes.
# This is some basic R stuff
# I can do some stuff in the console by executing code
print("hello world")
# I can also make some new objects in my environment
string_object <- "derp"
numeric_object <- 5
vector_object <- c("schwarber", "turner", "harper", "bohm", "realmuto", "castellanos", "stott", "sosa", "rojas")
# To get started we are going to load libraries that we will need to work with more complex data like
# spatial objects and data-frames (aka spreadsheet type things)
library(tidyverse)
library(sf)
library(tigris)
# Now let's load the data
# Load a csv
phila_tracts <- read.csv("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_2020.csv")
# What do these data look like?
glimpse(phila_tracts)
# Look at some central tendancies
mean(phila_tracts$pop)
median(phila_tracts$med_inc) # what's going wrong here??
median(phila_tracts$med_inc, na.rm = TRUE)
# Let's use the core dplyr "verbs" to manipulate the data and create some new data frames
just_two_columns <- phila_tracts %>%
select(GEOID, tract)
some_new_column_names <- phila_tracts %>%
rename(tracty_mctracterson = tract,
unique_ID = GEOID)
# When I use the mutate command, I'm going to overwrite my existing data frame - that helps
# keep my environment nice and clean (but can also cause me issues if i'm not careful)
phila_tracts <- phila_tracts %>%
mutate(pct_own = 100*(owner_hh/hhs),
majority_white = ifelse(pct_wht > 50, TRUE, FALSE))
# Let's do some more detailed kinds of summaries using group_by
# OK, now let's get SPATIAL
# Load an sf object
phila_tracts_sf <- st_read("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_no_data.geojson")
# What does it look like?
glimpse(phila_tracts_sf)
phila_tracts_sf
st_crs(phila_tracts_sf)
# Let's reproject it to PA State Plane (see spatialreference.org to find the CRS)
# To keep our environment nice and neat, let's
phila_tracts_sf %>%
st_transform(crs = 2272)
# do a tabular join to bring the two objects together
tracts_with_data <- left_join(phila_tracts_sf, phila_tracts, by = "NAME")
# What do we have now? Let's check out our data.
glimpse(tracts_with_data)
# Let's clean it up a bit, some of our columns got duplicated and renamed
tracts_with_data <- tracts_with_data %>%
select(-tract.y, -GEOID.y) %>%
rename(GEOID = GEOID.x,
tract = tract.x)
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc)) +
facet_wrap(~majority_white)+
labs(
title = "Median Household Income, Philadelphia Census Tracts, 2020",
subtitle = "The Average Tract's Median HH Income is appx $26,700",
x="Dollars (not inflation adjusted)",
y="Number of Tracts",
caption = "Data: American Community Survey 5-year estimates")+
theme_bw()
# Introduction to GIS with R - The Tidyverse and sf
# CPLN 0795, 2024
# We are going to do almost the exact same routines that we did in classes 2-3 using ArcGIS,
# except we will do it in R.
# First we toy around with code really simply to see how it executes.
# This is some basic R stuff
# I can do some stuff in the console by executing code
print("hello world")
# I can also make some new objects in my environment
string_object <- "derp"
numeric_object <- 5
vector_object <- c("schwarber", "turner", "harper", "bohm", "realmuto", "castellanos", "stott", "sosa", "rojas")
# To get started we are going to load libraries that we will need to work with more complex data like
# spatial objects and data-frames (aka spreadsheet type things)
library(tidyverse)
library(sf)
library(tigris)
# Now let's load the data
# Load a csv
phila_tracts <- read.csv("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_2020.csv")
# What do these data look like?
glimpse(phila_tracts)
# Look at some central tendancies
mean(phila_tracts$pop)
median(phila_tracts$med_inc) # what's going wrong here??
median(phila_tracts$med_inc, na.rm = TRUE)
# Let's use the core dplyr "verbs" to manipulate the data and create some new data frames
just_two_columns <- phila_tracts %>%
select(GEOID, tract)
some_new_column_names <- phila_tracts %>%
rename(tracty_mctracterson = tract,
unique_ID = GEOID)
# When I use the mutate command, I'm going to overwrite my existing data frame - that helps
# keep my environment nice and clean (but can also cause me issues if i'm not careful)
phila_tracts <- phila_tracts %>%
mutate(pct_own = 100*(owner_hh/hhs),
majority_white = ifelse(pct_wht > 50, "Majority White", "Majority Non-White"))
# Let's do some more detailed kinds of summaries using group_by
# OK, now let's get SPATIAL
# Load an sf object
phila_tracts_sf <- st_read("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_no_data.geojson")
# What does it look like?
glimpse(phila_tracts_sf)
phila_tracts_sf
st_crs(phila_tracts_sf)
# Let's reproject it to PA State Plane (see spatialreference.org to find the CRS)
# To keep our environment nice and neat, let's
phila_tracts_sf %>%
st_transform(crs = 2272)
# do a tabular join to bring the two objects together
tracts_with_data <- left_join(phila_tracts_sf, phila_tracts, by = "NAME")
# What do we have now? Let's check out our data.
glimpse(tracts_with_data)
# Let's clean it up a bit, some of our columns got duplicated and renamed
tracts_with_data <- tracts_with_data %>%
select(-tract.y, -GEOID.y) %>%
rename(GEOID = GEOID.x,
tract = tract.x)
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc)) +
labs(
title = "Median Household Income, Philadelphia Census Tracts, 2020",
subtitle = "The Average Tract's Median HH Income is appx $26,700",
x="Dollars (not inflation adjusted)",
y="Number of Tracts",
caption = "Data: American Community Survey 5-year estimates")+
theme_bw()
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc)) +
facet_wrap(~majority_white)+
labs(
title = "Median Household Income, Philadelphia Census Tracts, 2020",
subtitle = "The Average Tract's Median HH Income is appx $26,700",
x="Dollars (not inflation adjusted)",
y="Number of Tracts",
caption = "Data: American Community Survey 5-year estimates")+
theme_bw()
ggplot()+
geom_sf(data = tracts_with_data %>%
mutate(owner_pct = 100*(owner_hh / hhs)) %>%
filter(owner_pct <= 100),
aes(fill = owner_pct)) +
theme_minimal()
ggplot()+
geom_sf(data = tracts_with_data %>%
mutate(owner_pct = 100*(owner_hh / hhs)) %>%
filter(owner_pct <= 100),
aes(fill = owner_pct)) +
facet_wrap(~majority_white)+
theme_minimal()
philly_311 <- st_read("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philly_311.geojson")
points_and_tracts <- st_join(philly_311, phila_tracts_sf)
st_crs(philly_311)
st_crs(phila_tracts_sf)
st_crs(phila_tracts_sf)
census_api_key("e79f3706b6d61249968c6ce88794f6f556e5bf3d", overwrite = TRUE)
library(tidycensus)
census_api_key("e79f3706b6d61249968c6ce88794f6f556e5bf3d", overwrite = TRUE)
## Set up a list of variables to grab
acs_vars <- c("B01001_001E", # ACS total Pop estimate
"C02003_004E", # One race black
"C02003_003E", # One race white
"B03001_003E", # Hispanic (all)
"B02001_005E", # AAPI
"B11012_001E", # n Households
"B08137_003E", # Renter hh
"B08137_002E", # owner hh
"B06011_001E") # Median income in past 12 months
acs2020 <- get_acs(geography = "tract",
year = 2020,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
select(GEOID, NAME, acs_vars) %>%
rename(pop = B01001_001E,
med_inc = B06011_001E,
blk_tot = C02003_004E,
wht_tot = C02003_003E,
hsp_tot = B03001_003E,
aapi_tot = B02001_005E,
hhs = B11012_001E,
renter_hh = B08137_003E,
owner_hh = B08137_002E) %>%
mutate(year = 2020,
pct_wht = 100*(wht_tot/pop),
pct_blk = 100*(blk_tot/pop),
pct_hsp = 100*(hsp_tot/pop),
pct_aapi = 100*(aapi_tot/pop),
rent_pct = 100*(renter_hh / hhs)) %>%
mutate(tract = str_sub(GEOID, start= -6))
points_and_tracts <- st_join(philly_311, acs_2020)
points_and_tracts <- st_join(philly_311, acs2020)
??load_variables
acs2020 <- get_acs(geography = "tract",
year = 2020,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide")
acs2020 <- acs2020 %>%
select(GEOID, NAME, acs_vars) %>%
rename(pop = B01001_001E,
med_inc = B06011_001E,
blk_tot = C02003_004E,
wht_tot = C02003_003E,
hsp_tot = B03001_003E,
aapi_tot = B02001_005E,
hhs = B11012_001E,
renter_hh = B08137_003E,
owner_hh = B08137_002E) %>%
mutate(year = 2020,
pct_wht = 100*(wht_tot/pop),
pct_blk = 100*(blk_tot/pop),
pct_hsp = 100*(hsp_tot/pop),
pct_aapi = 100*(aapi_tot/pop),
rent_pct = 100*(renter_hh / hhs))
st_crs(acs2020)
acs2020 <- st_transform(crs = 2272)
acs2020 <- acs2020 %>%
st_transform(crs = 2272)
points_and_tracts <- st_join(philly_311, acs2020)
View(points_and_tracts)
points_and_tracts <- st_join(philly_311, acs2020 %>%
select(GEOID))
View(points_and_tracts)
glimpse(points_and_tracts)
tract_dumping_summary <- points_and_tracts %>%
group_by(GEOID) %>%
summarize(n = sum())
View(tract_dumping_summary)
tract_dumping_summary <- points_and_tracts %>%
as.data.frame() %>%
group_by(GEOID) %>%
summarize(n = sum())
View(tract_dumping_summary)
tract_dumping_summary <- points_and_tracts %>%
as.data.frame() %>%
group_by(GEOID) %>%
summarize(n = n())
View(tract_dumping_summary)
acs2020_incidents <- left_join(acs2020, tract_dumping_summary, by = "GEOID")
View(acs2020_incidents)
acs2020_incidents <- acs2020_incidents %>%
mutate(n = ifelse(is.na(n) == TRUE, 0, n))
ggplot()+
geom_sf(data = philly_311)
ggplot()+
geom_sf(data = acs2020,
aes(fill = med_inc), color = "transparent")
ggplot()+
geom_sf(data = acs2020,
aes(fill = med_inc), color = "transparent", alpha = 0.5)
ggplot()+
geom_sf(data = acs2020,
aes(fill = med_inc), color = "transparent", alpha = 0.5)+
theme_minimal()
ggplot()+
geom_sf(data = acs2020,
fill = "black")+
theme_minimal()
ggplot()+
geom_sf(data = acs2020,
fill = "black", color = "transparent")+
theme_minimal()
ggplot()+
geom_sf(data = acs2020,
fill = "black", color = "transparent")+
geom_sf(data = philly_311,
fill = "yellow", alpha = 0.4)+
theme_minimal()
ggplot()+
geom_sf(data = acs2020,
fill = "black", color = "transparent")+
geom_sf(data = philly_311,
color = "yellow", alpha = 0.4)+
theme_minimal()
ggplot()+
geom_sf(data = acs2020,
fill = "black", color = "transparent")+
geom_sf(data = philly_311,
color = "yellow", alpha = 0.2,
size = .5)+
theme_minimal()
ggplot()+
geom_sf(data = acs2020_incidents,
aes(fill = n), color = "transparent")+
theme_minimal()
??st_area
acs2020 %>%
mutate(area_sqmi = st_area(.))
acs2020 <- acs2020 %>%
mutate(area = st_area(.))
acs2020 <- acs2020 %>%
mutate(area_sqmi = area/27878555.87)
acs2020_incidents <- acs2020_incidents %>%
mutate(area = st_area(.))
acs2020_incidents <- acs2020_incidents %>%
mutate(area_sqmi = area/27878555.87)
View(acs2020_incidents)
acs2020_incidents <- acs2020_incidents %>%
mutate(area_sqmi = as.numeric(area/27878555.87))
View(acs2020_incidents)
hydro_pa <- area_water(state = "PA", class = "sf")
hydro_pa <- area_water(state = "PA", class = "sf", county = "Philadelphia")
View(hydro_pa)
